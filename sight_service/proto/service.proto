// to generate any binary(.pb) or python clients (_pb2.py/_pb2_grpc.py),
// you must have googleapi (https://github.com/googleapis/googleapis)
// cloned on your system

// git clone https://github.com/googleapis/googleapis
// GOOGLEAPIS_DIR=<your-local-googleapis-folder> (/usr/local/google/home/meetashah/googleapis)

// and then run protoc like this from x-sight directory:
// python -m grpc_tools.protoc \
// --include_imports \
// --include_source_info \
// --proto_path=${GOOGLEAPIS_DIR} \
// --proto_path="py/" \
// --proto_path=. \
// --python_out=. \
// --grpc_python_out=. \
// --descriptor_set_out=api_descriptor.pb \
// sight_service/proto/service.proto

// for writing http rules, can take reference from here :
// https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#google.api.HttpRule

// The Interface for the Sight service.
syntax = "proto3";

package sight.x.service;

import "sight/proto/sight.proto";
import "sight_service/proto/numproto/protobuf/ndarray.proto";
import "google/api/annotations.proto";

// This API manages Sight logs, their creation and access to them.
service SightService {
  // A test request to validate that the service is up.
  rpc Test(TestRequest) returns (TestResponse) {
    // Client example (Assuming your service is hosted at the given 'DOMAIN_NAME'):
    //   curl http://DOMAIN_NAME/v1/test/{client_id}
    option (google.api.http) = {
      get: "/v1/test/{client_id}"
      // body: ""
    };
  }
  // rpc PrintInsertionTime(TestRequest) returns (TestResponse) {}
  // Creates a new Sight log.
  rpc Create(CreateRequest) returns (CreateResponse) {
    // Client example:
    //   curl http://DOMAIN_NAME/v1/create
    option (google.api.http) = { get: "/v1/create" };
  }
  rpc Close(CloseRequest) returns (CloseResponse) {
    // Client example:
    //   curl http://DOMAIN_NAME/v1/Close
    option (google.api.http) = { get: "/v1/Close" };
  }
  rpc WorkerAlive(WorkerAliveRequest) returns (WorkerAliveResponse) {
    // Client example:
    //   curl http://DOMAIN_NAME/v1/WorkerAlive
    option (google.api.http) = { get: "/v1/WorkerAlive" };
  }
  rpc Launch(LaunchRequest) returns (LaunchResponse) {
    //   curl http://DOMAIN_NAME/v1/launch/{client_id}/{label}
    option (google.api.http) = {
      post: "/v1/launch/{client_id}/{label}"
      body: "decision_config_params"
    };
  }
  // rpc GetWeights(GetWeightsRequest) returns (GetWeightsResponse) {}
  rpc DecisionPoint(DecisionPointRequest) returns (DecisionPointResponse) {
    //   curl http://DOMAIN_NAME/v1/decision_point/{client_id}/{worker_id}
    option (google.api.http) = {
      post: "/v1/decision_point/{client_id}/{worker_id}"
      body: "acme_config"
    };
  }
  // rpc DecisionOutcome(DecisionOutcomeRequest)
  //     returns (DecisionOutcomeResponse) {}
  // rpc CopyDataToReplayServer(CopyDataToReplayServerRequest) returns (CopyDataToReplayServerResponse) {}
  rpc Tell(TellRequest) returns (TellResponse) {
    //   curl http://DOMAIN_NAME/v1/tell/{client_id}/{worker_id}
    option (google.api.http) = {
      post: "/v1/tell/{client_id}/{worker_id}"
    };
  }
  rpc Listen(ListenRequest) returns (ListenResponse) {
    //   curl http://DOMAIN_NAME/v1/listen/{client_id}/{worker_id}
    option (google.api.http) = {
      get: "/v1/listen/{client_id}/{worker_id}"
    };
  }

  rpc CurrentStatus(CurrentStatusRequest) returns (CurrentStatusResponse) {
    //   curl http://DOMAIN_NAME/v1/current_status/{client_id}/{worker_id}
    option (google.api.http) = {
      get: "/v1/current_status/{client_id}/{worker_id}"
    };
  }
  rpc FetchOptimalAction(FetchOptimalActionRequest) returns (FetchOptimalActionResponse) {
    //   curl http://DOMAIN_NAME/v1/fetch_optimal_action/{client_id}/{worker_id}
    option (google.api.http) = {
      get: "/v1/fetch_optimal_action/{client_id}/{worker_id}"
    };
  }

  rpc ProposeAction(ProposeActionRequest) returns (ProposeActionResponse) {}
  rpc GetOutcome(GetOutcomeRequest) returns (GetOutcomeResponse) {}

  rpc FinalizeEpisode(FinalizeEpisodeRequest) returns (FinalizeEpisodeResponse) {
    //   curl http://DOMAIN_NAME/v1/finalize_episode/{client_id}/{worker_id}
    option (google.api.http) = {
      post: "/v1/finalize_episode/{client_id}/{worker_id}"
      body: "acme_config"
    };
  }
}
// message CopyDataToReplayServerRequest {
//   string client_id = 1;
//   string worker_id = 2;
//   numproto.protobuf.NDArray observation = 3;
//   numproto.protobuf.NDArray action = 4;
//   numproto.protobuf.NDArray reward = 5;
//   numproto.protobuf.NDArray discount = 6;
//   numproto.protobuf.NDArray next_observation = 7;
// }
// message CopyDataToReplayServerResponse {
//   string response_str = 1;
// }

// message AddObsRequest {
//   enum StepType{
//     DEFAULT = 0;
//     FIRST = 1;
//     MID = 2;
//     LAST = 3;
//   }
//   message Observation{
//     numproto.protobuf.NDArray action = 1;
//     StepType steptype = 2;
//     numproto.protobuf.NDArray reward = 3;
//     numproto.protobuf.NDArray discount = 4;
//     numproto.protobuf.NDArray observation = 5;
//   }
//   string client_id = 1;
//   repeated Observation episode_observations = 2;
// }
// message AddObsResponse {
//   string response_str = 1;
// }

// message GetWeightsRequest {
//   enum StepType{
//     DEFAULT = 0;
//     FIRST = 1;
//     MID = 2;
//     LAST = 3;
//   }
//   message Observation{
//     numproto.protobuf.NDArray action = 1;
//     StepType steptype = 2;
//     numproto.protobuf.NDArray reward = 3;
//     numproto.protobuf.NDArray discount = 4;
//     numproto.protobuf.NDArray observation = 5;
//   }
//   string client_id = 1;
//   string worker_id = 2;
//   repeated Observation episode_observations = 3;
// }

// // not using most probably
// message GetWeightsResponse {
//   message Layer {
//     message WeightsData {
//         repeated float b = 1;
//         // repeated float w = 2;
//         // NDArray b = 1;
//         numproto.protobuf.NDArray w = 2;
//     }
//     string name = 1;
//     WeightsData weights = 2;
//   }
//   repeated Layer layers = 1;
// }

message Acme_Request {
  enum StepType {
    DEFAULT = 0;
    FIRST = 1;
    MID = 2;
    LAST = 3;
  }
  message Observation {
    numproto.protobuf.NDArray action = 1;
    StepType steptype = 2;
    numproto.protobuf.NDArray reward = 3;
    numproto.protobuf.NDArray discount = 4;
    numproto.protobuf.NDArray observation = 5;
  }
  // string client_id = 1;
  // string worker_id = 2;
  repeated Observation episode_observations = 1;
  repeated string learner_keys = 2;
}
message Acme_Response {
  message Layer {
    message WeightsData {
        repeated float b = 1;
        numproto.protobuf.NDArray w = 2;
        repeated float offset = 3;
        repeated float scale = 4;
    }
    string name = 1;
    WeightsData weights = 2;
  }
  repeated Layer layers = 1;
}
message DecisionPointRequest {
  string client_id = 1;
  string worker_id = 2;
  string question_label = 6;
  sight.x.proto.DecisionPoint decision_point = 3; // need or not?
  sight.x.proto.DecisionOutcome decision_outcome = 4;
  // attributes
  Acme_Request acme_config = 5;
}
message DecisionPointResponse {
  sight.x.proto.DecisionParam action = 1;
  Acme_Response acme_response = 2;
  int64 response_idx = 3;

  enum ActionType {
    AT_UNKNOWN = 0;
    // Tells the worker to perform the provided action.
    AT_ACT = 1;
    // Tells the worker that the server is finished providing actions.
    AT_DONE = 2;
    // Tells the worker to back off and try again soon.
    AT_RETRY = 3;
  }
  ActionType action_type = 4;
}
// message DecisionOutcomeRequest {
//   sight.x.proto.DecisionOutcome decision_outcome = 1;
//   string client_id = 3;
//   string worker_id = 4;
//   float last_reward = 5;
//   OptimizerType optimizer_type = 6;
//   bool last_call = 7;
// }
// message DecisionOutcomeResponse {
//   string response_str = 1;
// }

message FetchOptimalActionRequest {
  string client_id = 1;
  string worker_id = 2;
}
message FetchOptimalActionResponse {
  string response_str = 1;
}

message TellRequest {
  string client_id = 1;
  string message_str = 2;
}
message TellResponse {
  string response_str = 1;
}

message ListenRequest {
  string client_id = 1;
}
message ListenResponse {
  bool response_ready = 1;
  string response_str = 2;
}

message CurrentStatusRequest {
  string client_id = 1;
  string worker_id = 2;
}
message CurrentStatusResponse {
  string response_str = 1;
  enum Status{
    DEFAULT = 0;
    IN_PROGRESS = 1;
    SUCCESS = 2;
    FAILURE = 3;
  }
  Status status = 2;
}

message LaunchRequest {
  sight.x.proto.DecisionConfigurationStart decision_config_params = 1;
  string label = 3;
  string client_id = 4;
  // int64 question_id = 5;
  string question_label = 6;
}
message LaunchResponse {
  string display_string = 1;
}

message ProposeActionRequest {
  // message Action {
  //   sight.x.proto.DecisionParam action_attrs = 1;
  // }
  string client_id = 1;
  // repeated Action actions = 2;
  sight.x.proto.DecisionParam action_attrs = 2;
  // sight.x.proto.DecisionParam state_attrs = 3;
  // repeated sight.x.proto.Attribute attributes = 3;
  sight.x.proto.DecisionParam attributes = 3;

  string question_label = 4;
}
message ProposeActionResponse {
  int64 action_id = 1;
}

message GetOutcomeRequest {
  string client_id = 1;
  repeated int64 unique_ids = 2;
  string question_label = 3;
}
message GetOutcomeResponse {
  message Outcome{
    enum Status{
      DEFAULT = 0;
      PENDING = 1;
      ACTIVE = 2;
      COMPLETED = 3;
      NOT_EXIST = 4;
    }
    sight.x.proto.DecisionParam state_attrs = 1;
    sight.x.proto.DecisionParam action_attrs = 2;
    float reward = 3;
    sight.x.proto.DecisionParam outcome_attrs = 4;
    sight.x.proto.DecisionParam attributes = 5;
    Status status = 6;
    string response_str = 7;
    int64 action_id = 8;
  }
  repeated Outcome outcome = 1;
}

message FinalizeEpisodeRequest {
  string client_id = 1;
  string worker_id = 2;
  string question_label = 7;
  // sight.x.proto.DecisionPoint decision_point = 3;
  // sight.x.proto.DecisionOutcome decision_outcome = 4;
  sight.x.proto.DecisionConfigurationStart.OptimizerType optimizer_type = 5;
  Acme_Request acme_config = 6;
  // int64 action_id = 7;
  repeated sight.x.proto.DecisionMessage decision_messages = 8;
}

message FinalizeEpisodeResponse {
  string response_str = 1;
  bool stop_worker = 2;
}
message TestRequest {
  string client_id = 1;
}
message TestResponse {
  string val = 1;
}
// The format in which the log is stored.
enum LogFormat {
  LF_UNKNOWN = 0;
  // ColumnIO (go/columnio) in CNS.
  LF_COLUMNIO = 1;
  // Capacitor (go/capacitor) in CNS.
  LF_CAPACITOR = 2;
  // Spanner (go/spanner)
  LF_SPANNER = 3;
  // AVRO
  LF_AVRO = 4;
}
// Request message for SightService.Create.
message CreateRequest {
  // // The format in which the log data is stored.
  // LogFormat format = 1;
  // // The path of the directory where log files are stored.
  // string log_dir_path = 2;
  // // The user or group that owns this log data.
  // string log_owner = 3;
  // // Meaningful label that describes the contents of the log to a human.
  // string label = 4;
  // // Attributes that describe this log.
  // repeated sight.x.proto.Attribute attribute = 5;
}
// Response message for SightService.Create.
message CreateResponse {
  // The unique id of the created log.
  int64 id = 1;
  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;
}

message CloseRequest {
  string client_id = 1;
  optional string question_label = 2;
}

message CloseResponse {
  string response_str = 1;
}

message WorkerAliveRequest {
  string client_id = 1;
  string worker_id = 2;
  // int64 question_id = 3;
  string question_label = 4;
}

message WorkerAliveResponse {
  enum StatusType {
    ST_UNKNOWN = 0;
    // Tells the worker to continue to run.
    ST_ACT = 1;
    // Tells the worker to stop.
    ST_DONE = 2;
    // Tells the worker to back off and try again soon.
    ST_RETRY = 3;
  }
  StatusType status_type = 4;
  repeated sight.x.proto.DecisionMessage decision_messages = 5;
}
